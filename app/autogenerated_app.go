// Code generated by go-queryset. DO NOT EDIT.
package app

import (
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set AppQuerySet


// AppQuerySet is an queryset type for App
type AppQuerySet struct {
	db *gorm.DB
}


// NewAppQuerySet constructs new AppQuerySet
func NewAppQuerySet(db *gorm.DB) AppQuerySet {
	return AppQuerySet{
		db: db.Model(&App{}),
	}
}

func (qs AppQuerySet) w(db *gorm.DB) AppQuerySet {
	return NewAppQuerySet(db)
}

func (qs AppQuerySet) Select(fields ...AppDBSchemaField) AppQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *App) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *App) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) All(ret *[]App) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CoverEq is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) CoverEq(cover string) AppQuerySet {
	return qs.w(qs.db.Where("cover = ?", cover))
}

// CoverGt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) CoverGt(cover string) AppQuerySet {
	return qs.w(qs.db.Where("cover > ?", cover))
}

// CoverGte is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) CoverGte(cover string) AppQuerySet {
	return qs.w(qs.db.Where("cover >= ?", cover))
}

// CoverIn is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) CoverIn(cover ...string) AppQuerySet {
	if len(cover) == 0 {
		qs.db.AddError(errors.New("must at least pass one cover in CoverIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("cover IN (?)", cover))
}

// CoverLike is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) CoverLike(cover string) AppQuerySet {
	return qs.w(qs.db.Where("cover LIKE ?", cover))
}

// CoverLt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) CoverLt(cover string) AppQuerySet {
	return qs.w(qs.db.Where("cover < ?", cover))
}

// CoverLte is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) CoverLte(cover string) AppQuerySet {
	return qs.w(qs.db.Where("cover <= ?", cover))
}

// CoverNe is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) CoverNe(cover string) AppQuerySet {
	return qs.w(qs.db.Where("cover != ?", cover))
}

// CoverNotIn is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) CoverNotIn(cover ...string) AppQuerySet {
	if len(cover) == 0 {
		qs.db.AddError(errors.New("must at least pass one cover in CoverNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("cover NOT IN (?)", cover))
}

// CoverNotlike is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) CoverNotlike(cover string) AppQuerySet {
	return qs.w(qs.db.Where("cover NOT LIKE ?", cover))
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) CreatedAtEq(createdAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) CreatedAtGt(createdAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) CreatedAtGte(createdAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) CreatedAtLt(createdAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) CreatedAtLte(createdAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) CreatedAtNe(createdAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) Delete() error {
	return qs.db.Delete(App{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(App{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(App{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DeletedAtEq(deletedAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DeletedAtGt(deletedAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DeletedAtGte(deletedAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DeletedAtIsNotNull() AppQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DeletedAtIsNull() AppQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DeletedAtLt(deletedAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DeletedAtLte(deletedAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DeletedAtNe(deletedAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// DownloadEq is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DownloadEq(download string) AppQuerySet {
	return qs.w(qs.db.Where("download = ?", download))
}

// DownloadGt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DownloadGt(download string) AppQuerySet {
	return qs.w(qs.db.Where("download > ?", download))
}

// DownloadGte is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DownloadGte(download string) AppQuerySet {
	return qs.w(qs.db.Where("download >= ?", download))
}

// DownloadIn is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DownloadIn(download ...string) AppQuerySet {
	if len(download) == 0 {
		qs.db.AddError(errors.New("must at least pass one download in DownloadIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("download IN (?)", download))
}

// DownloadLike is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DownloadLike(download string) AppQuerySet {
	return qs.w(qs.db.Where("download LIKE ?", download))
}

// DownloadLt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DownloadLt(download string) AppQuerySet {
	return qs.w(qs.db.Where("download < ?", download))
}

// DownloadLte is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DownloadLte(download string) AppQuerySet {
	return qs.w(qs.db.Where("download <= ?", download))
}

// DownloadNe is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DownloadNe(download string) AppQuerySet {
	return qs.w(qs.db.Where("download != ?", download))
}

// DownloadNotIn is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DownloadNotIn(download ...string) AppQuerySet {
	if len(download) == 0 {
		qs.db.AddError(errors.New("must at least pass one download in DownloadNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("download NOT IN (?)", download))
}

// DownloadNotlike is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) DownloadNotlike(download string) AppQuerySet {
	return qs.w(qs.db.Where("download NOT LIKE ?", download))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) GetUpdater() AppUpdater {
	return NewAppUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) IDEq(ID uint) AppQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) IDGt(ID uint) AppQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) IDGte(ID uint) AppQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) IDIn(ID ...uint) AppQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) IDLt(ID uint) AppQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) IDLte(ID uint) AppQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) IDNe(ID uint) AppQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) IDNotIn(ID ...uint) AppQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) Limit(limit int) AppQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) Offset(offset int) AppQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs AppQuerySet) One(ret *App) error {
	return qs.db.First(ret).Error
}

// OrderAscByCover is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) OrderAscByCover() AppQuerySet {
	return qs.w(qs.db.Order("cover ASC"))
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) OrderAscByCreatedAt() AppQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) OrderAscByDeletedAt() AppQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByDownload is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) OrderAscByDownload() AppQuerySet {
	return qs.w(qs.db.Order("download ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) OrderAscByID() AppQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) OrderAscByUpdatedAt() AppQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCover is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) OrderDescByCover() AppQuerySet {
	return qs.w(qs.db.Order("cover DESC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) OrderDescByCreatedAt() AppQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) OrderDescByDeletedAt() AppQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByDownload is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) OrderDescByDownload() AppQuerySet {
	return qs.w(qs.db.Order("download DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) OrderDescByID() AppQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) OrderDescByUpdatedAt() AppQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) UpdatedAtEq(updatedAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) UpdatedAtGt(updatedAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) UpdatedAtGte(updatedAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) UpdatedAtLt(updatedAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) UpdatedAtLte(updatedAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs AppQuerySet) UpdatedAtNe(updatedAt time.Time) AppQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetCover is an autogenerated method
// nolint: dupl
func (u AppUpdater) SetCover(cover string) AppUpdater {
	u.fields[string(AppDBSchema.Cover)] = cover
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u AppUpdater) SetCreatedAt(createdAt time.Time) AppUpdater {
	u.fields[string(AppDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u AppUpdater) SetDeletedAt(deletedAt *time.Time) AppUpdater {
	u.fields[string(AppDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetDownload is an autogenerated method
// nolint: dupl
func (u AppUpdater) SetDownload(download string) AppUpdater {
	u.fields[string(AppDBSchema.Download)] = download
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u AppUpdater) SetID(ID uint) AppUpdater {
	u.fields[string(AppDBSchema.ID)] = ID
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u AppUpdater) SetUpdatedAt(updatedAt time.Time) AppUpdater {
	u.fields[string(AppDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u AppUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u AppUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set AppQuerySet

// ===== BEGIN of App modifiers

// AppDBSchemaField describes database schema field. It requires for method 'Update'
type AppDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f AppDBSchemaField) String() string {
	return string(f)
}

// AppDBSchema stores db field names of App
var AppDBSchema = struct {
	ID        AppDBSchemaField
	CreatedAt AppDBSchemaField
	UpdatedAt AppDBSchemaField
	DeletedAt AppDBSchemaField
	Cover     AppDBSchemaField
	Download  AppDBSchemaField
}{

	ID:        AppDBSchemaField("id"),
	CreatedAt: AppDBSchemaField("created_at"),
	UpdatedAt: AppDBSchemaField("updated_at"),
	DeletedAt: AppDBSchemaField("deleted_at"),
	Cover:     AppDBSchemaField("cover"),
	Download:  AppDBSchemaField("download"),
}

// Update updates App fields by primary key
// nolint: dupl
func (o *App) Update(db *gorm.DB, fields ...AppDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"cover":      o.Cover,
		"download":   o.Download,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update App %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// AppUpdater is an App updates manager
type AppUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewAppUpdater creates new App updater
// nolint: dupl
func NewAppUpdater(db *gorm.DB) AppUpdater {
	return AppUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&App{}),
	}
}

// ===== END of App modifiers

// ===== END of all query sets
